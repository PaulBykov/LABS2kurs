1)В Java существуют два основных способа создания потоков: наследование от класса Thread и реализация интерфейса Runnable. Для создания потока с помощью наследования нужно создать новый класс, который наследует класс Thread, и переопределить метод run()12.
2)Поток в Java может находиться в одном из следующих состояний: NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED3.
3)Поток в Java нельзя запустить дважды. Если попытаться сделать это, будет выброшено исключение IllegalThreadStateException4.
4)Метод start() используется для запуска потока. Он вызывает метод run(), в котором определены действия, выполняемые потоком56.
5)Метод interrupt() используется для прерывания потока. Метод isInterrupted() возвращает true, если поток был прерван. Метод interrupted() проверяет, был ли прерван текущий поток, и сбрасывает флаг прерывания7.
--6)Монитор объекта в Java - это синхронизационный конструкт, который ассоциирован с объектом. Методы wait() и notify()/notifyAll() используются для организации взаимодействия между потоками8910.
7)Метод wait() без параметра заставляет поток ждать до тех пор, пока другой поток не вызовет notify()/notifyAll(). Метод wait() с параметром делает то же самое, но только на указанный период времени11.
8)Метод Thread.yield() сообщает планировщику потоков, что текущий поток готов отказаться от процессорного времени в пользу других потоков1213. Метод Thread.sleep() приостанавливает выполнение текущего потока на указанный период времени1415161718.
9)Метод Thread.join() заставляет текущий поток ждать, пока поток, на котором этот метод вызван, не завершит свое выполнение14.
10)Deadlock в Java - это ситуация, когда два или более потоков заблокированы навсегда, взаимно ожидая друг друга.
11)Приоритет потока в Java - это свойство, которое помогает планировщику потоков определить порядок выполнения потоков.
12)Демон-потоки в Java - это потоки, которые выполняются в фоновом режиме и не предотвращают завершение работы JVM.
13)Усыпление потока в Java обычно означает приостановку его выполнения на некоторое время с помощью метода Thread.sleep().
14)ThreadGroup в Java - это класс, который предоставляет возможность группировать потоки в единую логическую группу. Это может быть полезно для управления группой потоков как единым целым.
15)Поток в Java может быть в одном из следующих состояний: NEW, RUNNABLE, BLOCKED, WAITING, TIMED_WAITING, TERMINATED. Поток начинает свою жизнь в состоянии NEW, затем переходит в состояние RUNNABLE, когда вызывается метод start(). В процессе выполнения поток может переходить в другие состояния и в конце концов достигает состояния TERMINATED3.
16)Мы можем попытаться остановить поток в Java, вызвав метод interrupt(). Однако это лишь предложение потоку прервать свое выполнение. Поток может игнорировать это предложение, если он не проверяет свое прерванное состояние.
17)Синхронизация в Java - это механизм, который позволяет контролировать доступ к общим ресурсам в многопоточной среде.
18)Атомарные типы в Java - это специальные классы, предоставляемые пакетом java.util.concurrent.atomic, которые поддерживают атомарные операции на одном переменном значении.
19)Блокирующие очереди в Java ожидают, когда элемент станет доступным для извлечения, если очередь пуста, и ожидают пространства для добавления нового элемента, если очередь полна. Неблокирующие очереди, напротив, немедленно возвращают результат, независимо от того, доступен ли элемент или есть ли пространство для добавления.
20)CyclicBarrier и CountDownLatch оба используются для синхронизации потоков, но они работают немного по-разному. CountDownLatch позволяет одному или нескольким потокам ждать, пока другие потоки не завершат определенное количество операций. CyclicBarrier используется, когда несколько потоков должны ждать друг друга, чтобы продолжить выполнение.
21)Semaphore в Java - это класс, который предоставляет механизм семафора. Семафоры используются для контроля доступа к общему ресурсу.
22)Executor в Java - это интерфейс, который предоставляет метод execute() для запуска новых задач.
23)ExecutorService в Java - это подинтерфейс Executor, который добавляет функции управления жизненным циклом потока и методы для управления и контроля задач.